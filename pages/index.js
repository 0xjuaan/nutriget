import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'

import { Inter } from 'next/font/google'
import styles from 'next/styles/Home.module.css'

import { useRouter } from 'next/router';
import {useState, useEffect} from 'react';

import MainButton from '../components/mainButton';
import ReactModal from 'react-modal';

import { getSession } from "/session";


const inter = Inter({ subsets: ['latin'] })

export async function getServerSideProps({ req, res }) {
  const { user } = getSession(req) ?? { user: null};
  if (!user) return { redirect: { permanent: false, destination: "/login" } };
  else return { props: { user } };
}

//This is the homepage for users once they log in to Nutriget
export default function Home({ user }) {
  const router = useRouter();
  const query = router.query; //This will be 'true' if the user just logged in
  const [modalOpen, setModalOpen] = useState(false);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [calorieLimit, setCalorieLimit] = useState();
  const [proteinGoal, setProteinGoal] = useState();
  //Getting the user's calorie limit
  useEffect(() => {
    fetch('/api/getCalories', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })
    .then(response => response.json())
    .then(data => {
        if (data.response == 'No calorie limit set') {
          return <Link href='/'>go to settings and set ur calorie limit</Link>
        }
        else {
          //Setting the state of calories, so now setCalories updates the calories variable
          setCalorieLimit(data.calorieLimit);
          setProteinGoal(data.proteinGoal);
        }
    });
  }, []);

  
  const logout = (e) => {
    e.preventDefault();
    fetch('/api/logout')
      .then((res) => res.json())
      .then((json) => {
        if (json.response.includes('out')) {
          router.push(
            {pathname: '/login',
          query: {logout: true}});
        }
      });
  }

  const setCalories = (e) => {
    e.preventDefault();
    const newCalories = document.getElementById('calorieLimit').value;
    if (newCalories != "") {
    setCalorieLimit(newCalories);
  }
    const newProtein = document.getElementById('proteinGoal').value;
    if (newProtein != "") {
      setProteinGoal(newProtein);
    }

    fetch('/api/setCalories', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({calorieLimit: calorieLimit, proteinGoal: proteinGoal}),
    })
  }


    const openModal = () => {
    setModalOpen(true);
    };

    const closeModal = () => {
    setModalOpen(false);
    };
    const openSettings = () => {
      setSettingsOpen(true);
      
      };
  
      const closeSettings = () => {
      setSettingsOpen(false);
      };

      const modalStyles = {
        content: {
          alignItems: 'center',
          justifyContent: 'space-evenly',
          display: 'flex',
          flexDirection: 'column',
          width: '50%', // Adjust the width as needed
          borderRadius: '10px', // Rounded corners
          maxHeight: '80vh', // Take up less space, adjust the height as needed
          margin: 'auto',
          background: 'rgba(0,0,0, 0.1)', // Glassmorphism background color
          backdropFilter: 'blur(24px)', // Blur effect
          WebkitBackdropFilter: 'blur(24px)', // Blur effect for Safari
          border: '1px solid rgba(2, 200, 55, 1)', // Glassmorphism border
        },
        overlay: {
          background: 'rgba(0,0,0, 0.7)', // Dark background color
        },
      }
      
      
  return (
    <>
      <Head>
        <title>Nutriget</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        
        <div className={styles.center}>
          <h1>Hi {user.username}</h1>
          <h1>
            Nutriget
          </h1>
          
          <button
          onClick={openSettings}
          className={styles.smallButton}
          rel="noopener noreferrer">
          <div>
            <h5 className={inter.className}>
                Settings
            </h5>
          </div>    
        </button>

        </div>
        

        {query.login ? (<p>Welcome back, user!</p>) : (<h1></h1>)}

        <button
          onClick={openModal}
          className={styles.bigButton}
          rel="noopener noreferrer">
          <div>
            <h1 className={inter.className}>
                New
            </h1>
            <p className={inter.className}>
                Add a new meal
            </p>
          </div>    
          <Image alt="add" width={175} height={175} src='/add_sign.png'></Image>
        </button>

        <div className={styles.grid}>
          {/*This is a grid rather than flexbox. Think like cubby-hole ting*/}
            
          <MainButton 
            page="today" 
            title="Today's Data" 
            description="See your nutrition data for today"/>
          
          <MainButton
            page="history"
            title="Meal History"
            description="View your past meals"/>
      
         </div>
          {/*HERE IS THE MODAL */}
         <ReactModal 
            isOpen={modalOpen} 
            onRequestClose={closeModal}
            style={modalStyles}>
            <Link
            className={styles.bigButton}
            href="/scratch"
            >
              <div>
                <h1 className={inter.className}>
                  Start From Scratch</h1>
                <p className={inter.className}>
                  Tell us what your meal is</p>
              </div>
            </Link>
            <Link
            className={styles.bigButton}
            href="/history"
            >
              <div>
                <h1 className={inter.className}>
                  Add From History</h1>
                <p className={inter.className}>
                  Having the same meal again?</p>
              </div>
            </Link>
          </ReactModal>

          {/*Settings Modal */}
          <ReactModal 
            isOpen={settingsOpen} 
            onRequestClose={closeSettings}
            style={modalStyles}>
            <h1>Settings</h1>

            <div>
              <h5>Update your daily calorie limit:</h5>
              <input type="number" id="calorieLimit" name="calorieLimit" min="0" max="5000"></input>
              <button onClick={setCalories}>Set</button>
              <h6>Current calorie limit: {calorieLimit}</h6>
            </div>

            <div>
              <h5>Update your daily protein goal:</h5>
              <input type="number" id="proteinGoal" name="proteinGoal" min="0" max="400"></input>
              <button onClick={setCalories}>Set</button>
              <h6>Current protein goal: {proteinGoal}</h6>
            </div>

            <button onClick={logout} className={styles.smallButton}>Log Out</button>
            
          </ReactModal>
      </main>
    </>
  )
}
